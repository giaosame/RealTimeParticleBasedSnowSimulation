#version 450
#extension GL_ARB_separate_shader_objects : enable

// #define PARTICLE_COUNT 14112

struct Vertex {
    vec4 position;
	vec4 velocity;
	vec4 attr1;  // radius, mass, isFixed, snowPortion
	vec4 attr2;  // neighborMax, hasBrokenBond, d, (null)
	vec4 color;
};

layout(set = 0, binding = 0) buffer VerticesA {
	Vertex verticesA[];
};

layout(set = 0, binding = 2) buffer CellVertArray {
	int cellVertArray[];  
};

layout(set = 0, binding = 3) buffer CellVertCount {
	int cellVertCount[];   
};

layout(set = 0, binding = 4) buffer NumVertsBuffer {
	int num_vertices;   
};

// Find the cell id of particles and fill the cellVertArray buffer with particle ids
void main() {
	const int PARTICLE_COUNT = num_vertices;
	uint index = gl_GlobalInvocationID.x;
    if (index >= PARTICLE_COUNT)
		return;
	
	int temp = num_vertices;
	// identity the cell id of each particle
	const float gridSize = 0.1f;
	const float width = 10.f;   // Y
	const float length = 10.f;  // X
	const float height = 10.f;  // Z

	vec3 pos = verticesA[index].position.xyz;

	int indexX = int(floor(pos.x / gridSize));
	int indexY = int(floor(pos.y / gridSize));
	int indexZ = int(floor(pos.z / gridSize));

	int cellId = indexX + indexY * 100 + indexZ * 100 * 100;
	int idxTemp = atomicAdd(cellVertCount[cellId], 1);
	cellVertArray[cellId * 6 + idxTemp] = int(index);
}