#version 450
#extension GL_ARB_separate_shader_objects : enable

#define PI 3.1415926f
#define PARTICLE_COUNT 27000

//layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

struct Vertex {
    vec4 position;
	vec4 velocity;
	vec4 attr1;  // radius, mass, isFixed, snowPortion
	vec4 attr2;  // neighborMax, hasBrokenBond, d, (null)
};

layout(set = 0, binding = 0) buffer VerticesA {
	Vertex verticesA[];
};

layout(set = 0, binding = 1) buffer VerticesB {
	Vertex verticesB[];
};

layout(set = 0, binding = 2) buffer SortIds {
	ivec2 sortIds[];   // cell_id, vertex_idx
};

layout(set = 0, binding = 4) buffer CellVertArray {
	int cellVertArray[];  
};

layout(set = 0, binding = 5) buffer CellVertCount {
	int cellVertCount[];   
};

void main() {
	uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (index >= 125000)
		return;

	cellVertCount[index] = 0;
	for(int i = 0; i < 6; ++i)
	{	
		cellVertArray[index * 6 + i] = 0;
	}






		/*
	// identity the cell id of each particle
	float gridSize = 0.1f;
	float width = 5.f;   // Y
	float length = 5.f;  // X
	float height = 5.f;  // Z

	int vertIndex = sortIds[index].y;
	vec3 pos = verticesA[vertIndex].position.xyz;

	int indexX = int(pos.x / gridSize);
	int indexY = int(pos.y / gridSize);
	int indexZ = int(pos.z / gridSize);

	int cellId = indexX + indexY * 50 + indexZ * 50 * 50;
	sortIds[index].x = cellId; 

    memoryBarrier();
	
	int num = sortIds[index].y;
	int l = num;
	if (num % 2 == 0)
		l = num / 2;
	else
		l = (num / 2) + 1;
	for (int i = 0; i < l; i++)
	{
		if ((index & 1) == 0 && (index < (num - 1)))  //even phase
		{
			if (sortIds[index].x > sortIds[index + 1].x) {
				ivec2 temp = sortIds[index];
				sortIds[index] = sortIds[index + 1];
				sortIds[index + 1] = temp;
			}
		}

		memoryBarrier();
		if ((index & 1) == 1 && (index < (num - 1)))     //odd phase
		{
			if (sortIds[index].x > sortIds[index + 1].x) {
				ivec2 temp = sortIds[index];
				sortIds[index] = sortIds[index + 1];
				sortIds[index + 1] = temp;
			}
		}
		memoryBarrier();
	}*/
	//verticesB[index].position += vec4(0.004, 0.004, 0.004, 0);
}